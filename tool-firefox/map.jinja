{#- get dict of user configurations -#}
{%- set firefox = salt['pillar.get']('tool:firefox', {'users': {}}, merge=True) -%}
{%- set users = {} -%}

{%- set version = firefox.get('version', 'esr') %}
{%- set package_name = {
  'beta': 'firefox-beta',
  'dev': 'firefox-developer-edition',
  'esr': 'firefox-esr',
  'nightly': 'firefox-nightly',
  'stable': 'firefox'
  }.get(version) -%}

{#- need this string for path handling (probably, need to test) -#}
{%- set esr = '-esr' if 'esr' == version else '' %}

{%- set package = salt['grains.filter_by']({
  'MacOS': 'homebrew/cask/' ~ package_name,
  'default': package_name
  }, 'os_family') -%}

{#- @TODO this only works for stable probably and not sure about the paths atm -#}
{%- set default_path = salt['grains.filter_by']({
  'MacOS': '/Applications/Firefox.app/Contents/MacOS/firefox',
  'default': '/usr/bin/firefox' ~ esr
  }, 'os_family') %}

{%- do firefox.update({'_package': package, '_default_path': default_path, '_esr': esr, 'version': version}) -%}

{%- set default_confdir = salt['grains.filter_by']({
  'Darwin': '/Library/Application Support/Firefox',
  'Linux': '/.mozilla',
  'Windows': '\\AppData\\Roaming\\Mozilla\\Firefox'
  }, 'kernel')
-%}

{%- load_yaml as extensions_default -%}
installation_mode: {{ firefox.get('ext_default_installmode', 'normal_installed') }}
updates_disabled: {{ firefox.get('ext_default_updatedisabled', False) }}
{%- endload -%}

{%- set policies = firefox.get('policies', {}) -%}

{%- if firefox.get('extensions') -%}
  {# parse extensions. allows to specify pre-defined extensions by name
     instead of looking up ID/URL on addons.mozilla.org #}
  {%- set extensions_data = {} -%}
  {%- set local_extensions = [] -%}
  {%- for extension in firefox.extensions -%}
    {%- set extension_config = {} -%}
    {%- if extension is mapping -%}
      {%- set extension_name = extension.keys() | list | first -%}
      {%- set extension_config = extension[extension_name] -%}
      {%- if extension_config.get('local', False) -%}
        {%- do local_extensions.append(extension_name) -%}
        {%- do extension_config.update({'install_url': 'file://' ~ extensions_local_base ~ '/' ~ extension_name ~ '.xpi'}) -%}
        {%- do extension_config.pop('local') -%}
      {%- endif -%}
    {%- else -%}
      {%- set extension_name = extension -%}
    {%- endif -%}
    {%- set extension_config = salt['defaults.merge'](extensions_default, extension_config, in_place=False) -%}
    {%- import_yaml "tool-firefox/config/policies/addons/" + extension_name + ".yml" as data -%}
    {%- do data[data.keys() | list | first].update(extension_config) -%}
    {%- do extensions_data.update(data) -%}
  {%- endfor -%}
  {%- do firefox.update({'_local_extensions': local_extensions}) -%}
  {%- set policies = salt['defaults.merge'](policies, {'ExtensionSettings': extensions_data}, in_place=False) -%} {# for whatever reason, this does not work in_place #}
{%- endif -%}

{%- if policies -%}
  {%- if 'Darwin' == grains['kernel'] -%}
    {#- on MacOS, policies have to be enabled explicitly -#}
    {%- do policies.update({'EnterprisePoliciesEnabled': True}) -%}
  {%- elif 'Linux' == grains.kernel %}
    {%- do firefox.update({'_policypath': salt['match.filter_by']({
      'RedHat': '/usr/lib64/firefox{}/distribution' | format(esr),
      'Suse': '/usr/lib64/firefox{}/distribution' | format(esr),
      '*BSD': '/usr/local/lib/firefox{}/distribution' | format(esr),
      'default': '/usr/lib/firefox{}/distribution' | format(esr),
      }, 'os_family')})
    -%}
  {%- endif %}
{%- endif -%}

{%- do firefox.update({'_policies': policies}) -%}

{%- if firefox.get('userjs') %}
  {%- if firefox.userjs is mapping -%}
    {%- set userjs_source = firefox.userjs.source -%}
    {%- set userjs_hash = firefox.userjs.hash %}
  {%- else %}
    {%- set userjs_source = firefox.userjs %}
    {%- set userjs_hash = False %}
  {%- endif %}
  {%- do firefox.update({'_userjs_source': userjs_source, '_userjs_hash': userjs_hash}) %}
{%- endif %}

{#- rejectattr filter does not fit with mapping. need to filter out users before merging default values -#}
{%- for tool_user, tool_user_conf in salt['pillar.get']('tool:users', {}).items() -%}
{#- by default, install tool if it was targeted. explicitly deny for a specific user to override -#}
  {%- if tool_user_conf.get('firefox', True) -%}
    {%- do users.update({tool_user: tool_user_conf}) -%}
  {%- endif -%}
{%- endfor -%}

{%- do salt['defaults.merge'](users, firefox.get('users', {})) -%}

{#- update all user configuration for firefox with its defaults -#}
{%- do salt['defaults.update'](users, {'firefox': firefox.get('defaults', {})}) -%}

{#- embed user information that will be reused (home, primary group, shell, paths) -#}
{%- for user in users.keys() -%}
  {%- do users[user].update({'_firefox': {}}) -%}
  {%- do users[user].update({'name': user}) -%}
  {%- set user_info = salt['user.info'](user) -%}
  {%- load_yaml as user_info -%}
group: {{ salt['user.primary_group'](user) }}
home: {{ user_info.home }}
shell: {{ user_info.shell.split('/')[-1] }}
  {%- endload -%}
  {%- do users[user].update(salt['defaults.merge'](user_info, users[user], in_place=False)) -%}
  {%- set confdir = user_info.home + default_confdir %}
  {#- need the default profile name, should be default-release in most cases. not sure which ones use default -#}
  {%- set profilename = 'default-release' if version in ['esr', 'stable'] else 'default' -%}
  {%- set profile = (salt['file.find'](confdir ~ '/Profiles/*.' ~ profilename, type='d', maxdepth=0) or ['']) | first %}
  {%- do users[user]['_firefox'].update({'confdir': confdir, 'profile': profile}) -%}
{%- endfor -%}

{%- do firefox.update({'users': users.values() | list}) -%}
