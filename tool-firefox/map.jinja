{#- get dict of user configurations -#}
{%- set firefox = salt['pillar.get']('tool:firefox', {'users': {}}, merge=True) -%}
{%- set users = {} -%}

{#- originally, wanted to make version selection possible, but it was too much work
    for my use case (handling installation paths, default profile suffixes, package
    names and tar installation on linux for beta/nightly/dev).
    default to system default, which is mostly stable, but Debian
    uses ESR, ironically only provides FF stable in unstable repo -#}
{%- set version = 'esr' if 'Debian' == grains['os'] else 'stable' %}

{%- set vars = salt['match.filter_by']({
  'beta': {
    '_default_profile': '.default-beta',
    '_name_suffix': ' Beta'},
  'dev': {
    '_default_profile': '.dev-edition-default',
    '_mac_suffix': ' Developer Edition',
    '_name_suffix': ' Developer Edition'},
  'esr': {
    '_default_profile': '.default-esr',
    '_apt_suffix': '-esr',
    '_name_suffix': ' ESR'},
  'nightly': {
    '_default_profile': '.default-nightly',
    '_mac_suffix': ' Nightly',
    '_name_suffix': ' Nightly'},
  'stable': {
    '_default_profile': '.default-release',
    '_name_suffix': ''}
  }, minion_id=version) -%}

{#- @TODO windows/rpm/bsd, probably C:/Program Files/Mozilla/Firefox or Program Files (x86). not sure about suffix -#}
{%- set installation_path = salt['grains.filter_by']({
  'MacOS': '/Applications/Firefox{}.app'.format(vars.get('mac_suffix', '')),
  'Windows': 'C:/Program Files/Mozilla/Firefox',
  'RedHat': '/usr/lib64/firefox',
  'Suse': '/usr/lib64/firefox',
  '*BSD': '/usr/local/lib/firefox',
  'default': '/usr/lib/firefox{}'.format(vars.get('apt_suffix', ''))
  }, 'os_family') %}

{%- set default_profile_dir = salt['grains.filter_by']({
  'Darwin': '/Library/Application Support/Firefox/Profiles',
  'Linux': '/.mozilla/firefox/Profiles',
  'Windows': '/AppData/Roaming/Mozilla/Firefox'
  }, 'kernel')
-%}

{%- set bin_path = salt['grains.filter_by']({
  'Darwin': installation_path ~ '/Contents/MacOS/firefox',
  'Windows': installation_path ~ '/firefox.exe',
  'default': installation_path ~ '/firefox'
  }, 'kernel') %}

{#- currently, force version to default version for OS @TODO -#}
{%- do firefox.update({'_path': installation_path, '_bin': bin_path, 'version': version}) -%}
{%- do firefox.update(vars) %}

{%- load_yaml as extensions_default -%}
installation_mode: {{ firefox.get('ext_default_installmode', 'normal_installed') }}
updates_disabled: {{ firefox.get('ext_default_updatedisabled', False) }}
{%- endload -%}

{%- set policies = firefox.get('policies', {}) -%}

{%- if firefox.get('extensions') -%}
  {# parse extensions. allows to specify pre-defined extensions by name
     instead of looking up ID/URL on addons.mozilla.org #}
  {%- set extensions_data = {} -%}
  {%- set local_extensions = [] -%}
  {%- for extension in firefox.extensions -%}
    {%- set extension_config = {} -%}
    {%- if extension is mapping -%}
      {%- set extension_name = extension.keys() | list | first -%}
      {%- set extension_config = extension[extension_name] -%}
      {%- if extension_config.get('local', False) -%}
        {%- do local_extensions.append(extension_name) -%}
        {%- do extension_config.update({'install_url': 'file://' ~ firefox.ext_local_source ~ '/' ~ extension_name ~ '.xpi'}) -%}
        {%- do extension_config.pop('local') -%}
      {%- endif -%}
    {%- else -%}
      {%- set extension_name = extension -%}
    {%- endif -%}
    {%- set extension_config = salt['defaults.merge'](extensions_default, extension_config, in_place=False) -%}
    {%- import_yaml "tool-firefox/config/policies/addons/" + extension_name + ".yml" as data -%}
    {%- do data[data.keys() | list | first].update(extension_config) -%}
    {%- do extensions_data.update(data) -%}
  {%- endfor -%}
  {%- do firefox.update({'_local_extensions': local_extensions}) -%}
  {%- set policies = salt['defaults.merge'](policies, {'ExtensionSettings': extensions_data}, in_place=False) -%} {# for whatever reason, this does not work in_place #}
{%- endif -%}

{%- if policies -%}
  {%- if 'Darwin' == grains['kernel'] -%}
    {#- on MacOS, policies have to be enabled explicitly -#}
    {%- do policies.update({'EnterprisePoliciesEnabled': True}) -%}
  {%- endif %}
{%- endif -%}

{%- do firefox.update({'_policies': policies}) -%}

{%- if firefox.get('userjs') %}
  {%- if firefox.userjs is mapping -%}
    {%- set userjs_source = firefox.userjs.source -%}
    {%- set userjs_hash = firefox.userjs.hash %}
  {%- else %}
    {%- set userjs_source = firefox.userjs %}
    {%- set userjs_hash = False %}
  {%- endif %}
  {%- do firefox.update({'_userjs_source': userjs_source, '_userjs_hash': userjs_hash}) %}
{%- endif %}

{#- rejectattr filter does not fit with mapping. need to filter out users before merging default values -#}
{%- for tool_user, tool_user_conf in salt['pillar.get']('tool:users', {}).items() -%}
{#- by default, install tool if it was targeted. explicitly deny for a specific user to override -#}
  {%- if tool_user_conf.get('firefox', True) -%}
    {%- do users.update({tool_user: tool_user_conf}) -%}
  {%- endif -%}
{%- endfor -%}

{%- do salt['defaults.merge'](users, firefox.get('users', {})) -%}

{#- update all user configuration for firefox with its defaults -#}
{%- do salt['defaults.update'](users, {'firefox': firefox.get('defaults', {})}) -%}

{#- embed user information that will be reused (home, primary group, shell, paths) -#}
{%- for user in users.keys() -%}
  {%- do users[user].update({'_firefox': {}}) -%}
  {%- do users[user].update({'name': user}) -%}
  {%- set user_info = salt['user.info'](user) -%}
  {%- load_yaml as user_info -%}
group: {{ salt['user.primary_group'](user) }}
home: {{ user_info.home }}
shell: {{ user_info.shell.split('/')[-1] }}
  {%- endload -%}
  {%- do users[user].update(salt['defaults.merge'](user_info, users[user], in_place=False)) -%}
  {%- set profiles_dir = user_info.home + default_profile_dir %}
  {#- need the default profile name, should be default-release in most cases. not sure which ones use default -#}
  {%- set profile = (salt['file.find'](profiles_dir ~ '/*' ~ vars._default_profile, type='d', maxdepth=0) or ['']) | first %}
  {%- do users[user]['_firefox'].update({'confdir': profiles_dir, 'profile': profile}) -%}
{%- endfor -%}

{%- do firefox.update({'users': users.values() | list}) -%}
{{ firefox | json }}
